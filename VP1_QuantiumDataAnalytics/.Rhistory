ggplot(pricePerUnit, aes(x = pricePerUnit$price_per_unit, y = pricePerUnit$LYLTY_CARD_NBR, color = c(pricePerUnit$LIFESTAGE,pricePerUnit$PREMIUM_CUSTOMER))) +
geom_point() +
labs(x = "Price per unit sold", y = "Cusomer Id", title = "Sales by individual Customers") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
total_sales_2 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER,LYLTY_CARD_NBR,PROD_QTY)
pricePerUnit <-  summarise(total_sales_2, price_per_unit = TOT_SALES/PROD_QTY)
####plot
ggplot(pricePerUnit, aes(x = pricePerUnit$price_per_unit, y = pricePerUnit$LYLTY_CARD_NBR, color = pricePerUnit$LIFESTAGE)) +
geom_point() + facet_wrap(~pricePerUnit$PREMIUM_CUSTOMER)+ labs(x = "Price per unit sold", y = "Cusomer Id", title = "Sales by individual Customers") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
total_sales_2 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER,LYLTY_CARD_NBR,PROD_QTY)
pricePerUnit <-  summarise(total_sales_2, price_per_unit = TOT_SALES/PROD_QTY)
####plot
ggplot(pricePerUnit, aes(x = pricePerUnit$price_per_unit, y = pricePerUnit$LYLTY_CARD_NBR, color = pricePerUnit$LIFESTAGE)) +
geom_point() + facet_wrap(~pricePerUnit$PREMIUM_CUSTOMER)+ labs(x = "Price per unit sold", y = "Cusomer Id", title = "Sales by individual Customers") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
total_sales_2 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER,LYLTY_CARD_NBR,PROD_QTY)
pricePerUnit <-  summarise(total_sales_2, price_per_unit = TOT_SALES/PROD_QTY)
####plot
ggplot(pricePerUnit, aes(x = pricePerUnit$price_per_unit, y = pricePerUnit$LYLTY_CARD_NBR, color = pricePerUnit$PREMIUM_CUSTOMER)) +
geom_point() + facet_wrap(~pricePerUnit$LIFESTAGE)+ labs(x = "Price per unit sold", y = "Cusomer Id", title = "Sales by individual Customers") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
stat.test <- pricePerUnit %>%
group_by(PREMIUM_CUSTOMER) %>%
t_test( price_per_unit ~ LIFESTAGE) %>%
adjust_pvalue(method = "BH") %>%
add_significance()
stat.test <- pricePerUnit %>%
group_by(PREMIUM_CUSTOMER) %>%
t.test( price_per_unit ~ LIFESTAGE) %>%
adjust_pvalue(method = "BH") %>%
add_significance()
stat.test <- pricePerUnit %>%
group_by(PREMIUM_CUSTOMER) %>%
t.test( price_per_unit ~ LIFESTAGE) %>%
adjust_pvalue(method = "BH")
stat.test <- pricePerUnit %>%
group_by(PREMIUM_CUSTOMER) %>%
t.test( price_per_unit ~ LIFESTAGE)
stat.test <- pricePerUnit %>%
group_by(LIFESTAGE) %>%
t.test( price_per_unit ~ PREMIUM_CUSTOMER)
data(kidney)
library(survival)
data("kidney")
force(kidney)
pricePerUnit %>% lapply(pricePerUnit[,c("LIFESTAGE"==MIDAGE SINGLES/COUPLES)], function(x) t.test(x ~ pricePerUnit$PREMIUM_CUSTOMER, var.equal=T))
pricePerUnit %>% lapply(pricePerUnit[,"LIFESTAGE"], function(x) t.test(x ~ pricePerUnit$PREMIUM_CUSTOMER, var.equal=T))
pricePerUnit %>% lapply(pricePerUnit[,"price_per_unit"], function(x) t.test(x ~ c(pricePerUnit$PREMIUM_CUSTOMER,pricePerUnit$LIFESTAGE), var.equal=T))
lapply(pricePerUnit[,"price_per_unit"], function(x) t.test(x ~ c(pricePerUnit$PREMIUM_CUSTOMER,pricePerUnit$LIFESTAGE), var.equal=T))
lapply(pricePerUnit[,c("price_per_unit")], function(x) t.test(x ~ pricePerUnit$PREMIUM_CUSTOMER, var.equal=T))
xBudget <- pricePerUnit %>% filter(PREMIUM_CUSTOMER=="Budget", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xMain <- pricePerUnit %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xPre <- pricePerUnit %>% filter(PREMIUM_CUSTOMER=="Premium", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
View(xBudget)
View(xMain)
View(xPre)
t.test(pricePerUnit$price_per_unit ~ xBudget)
by(pricePerUnit,pricePerUnit$LIFESTAGE,function(i)t.test(pricePerUnit$price_per_unit ~ pricePerUnit$PREMIUM_CUSTOMER,data=i)
w
by(pricePerUnit,pricePerUnit$LIFESTAGE,function(i)t.test(pricePerUnit$price_per_unit ~ pricePerUnit$PREMIUM_CUSTOMER,data=i)
r
by(pricePerUnit,pricePerUnit$LIFESTAGE,function(i)t.test(pricePerUnit$price_per_unit ~ pricePerUnit$PREMIUM_CUSTOME)
r
by(pricePerUnit,pricePerUnit$LIFESTAGE,function(i)t.test(pricePerUnit$price_per_unit ~ pricePerUnit$PREMIUM_CUSTOME)
by(pricePerUnit,pricePerUnit$LIFESTAGE,function(i)t.test(pricePerUnit$price_per_unit ~ pricePerUnit$PREMIUM_CUSTOMER)
by(pricePerUnit,pricePerUnit$LIFESTAGE,function(i)t.test(pricePerUnit$price_per_unit ~ pricePerUnit$PREMIUM_CUSTOMER)
d
xBudget_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Premium", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xPre_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Budget", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
#tBud <- t.test(pricePerUnit$price_per_unit ~ xBudget)
View(xBudget_main)
View(xPre_main)
xBudget_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Premium", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xBudget_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Premium", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xPre_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Budget", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
t_Bud_Main <- t.test(xBudget$price_per_unit ~ xBudget_main$PREMIUM_CUSTOMER)
xBudget_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Premium", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xPre_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Budget", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
View(xBudget)
t_Bud_Main <- t.test(xBudget$price_per_unit ~ xBudget_main$PREMIUM_CUSTOMER)
xBudget_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Premium", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xPre_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Budget", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
t_Bud_Main <- t.test(xBudget_main$price_per_unit ~ xBudget_main$PREMIUM_CUSTOMER)
t_Pre_main <- t.test(xPre_main$price_per_unit ~ xPre_main$PREMIUM_CUSTOMER)
t_Bud_Main
t_Pre_main
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
View(xMain)
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
tab_fre_brand <- table(data$BRAND)
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
tab_fre_brand <- table(data$BRAND)
tab_fre_brand
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
tab_fre_brand <- table(data$BRAND)
summary(tab_fre_brand)
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
tab_fre_brand <- table(data$BRAND)
max(tab_fre_brand)
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
tab_fre_brand <- table(data$BRAND)
which(max(tab_fre_brand))
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
tab_fre_brand <- table(data$BRAND)
summarise(tab_fre_brand)
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
tab_fre_brand <- table(data$BRAND)
tab_fre_brand
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
tab_fre_brand <- table(data$BRAND)
tab_fre_brand
###APRIORI
library(arules)
library(arulesViz)
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
#tab_fre_brand <- table(data$BRAND)
#tab_fre_brand
###APRIORI
library(arules)
library(arulesViz)
glimpse(xMain)
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
#tab_fre_brand <- table(data$BRAND)
#tab_fre_brand
###APRIORI
library(arules)
library(arulesViz)
glimpse(xMain)
summary(xMain)
tr <- read.transactions(xMain, format = 'basket', sep=',')
write.csv(xMain, "try.csv")
tr <- read.transactions("try.csv", format = 'basket', sep=',')
tr
summary(tr)
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
#tab_fre_brand <- table(data$BRAND)
#tab_fre_brand
###APRIORI
library(arules)
library(arulesViz)
glimpse(xMain)
write.csv(xMain, "try.csv")
tr <- read.transactions("try.csv", format = 'basket', sep=',')
summary(tr)
itemFrequencyPlot(tr,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
#tab_fre_brand <- table(data$BRAND)
#tab_fre_brand
###APRIORI
library(arules)
library(arulesViz)
glimpse(xMain)
write.csv(xMain, "try.csv")
tr <- read.transactions("try.csv", format = 'basket', sep=',')
summary(tr)
library(RColorBrewer)
itemFrequencyPlot(tr,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xMain1 <- xMAin %>% select(xMain$BRAND)
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xMain1 <- xMain %>% select(xMain$BRAND)
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xMain1 <- xMain %>% select(xMain$BRAND)
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xMain1 <- select(xMain$BRAND)
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xMain1 <- xMain$BRAND
#tab_fre_brand <- table(data$BRAND)
#tab_fre_brand
###APRIORI
library(arules)
library(arulesViz)
glimpse(xMain1)
write.csv(xMain1, "try.csv")
tr <- read.transactions("try.csv", format = 'basket')
summary(tr)
library(RColorBrewer)
itemFrequencyPlot(tr,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
xMain2 <- xMain$PACK_SIZE
#tab_fre_brand <- table(data$BRAND)
#tab_fre_brand
glimpse(xMain2)
write.csv(xMain2, "try2.csv")
tr1 <- read.transactions("try2.csv", format = 'basket')
summary(tr1)
library(RColorBrewer)
itemFrequencyPlot(tr1,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
library(RColorBrewer)
tinytex::install_tinytex()
tinytex::is_tinytex()
knitr::opts_chunk$set(echo = TRUE)
purchase_beahviour <- as.data.table( read.csv("QVI_purchase_behaviour.csv"))
library(data.table)
library(ggplot2)
library(ggmosaic)
library(readr)
purchase_beahviour <- as.data.table( read.csv("QVI_purchase_behaviour.csv"))
transaction_data <- as.data.table(readxl::read_xlsx("QVI_transaction_data.xlsx"))
str(purchase_beahviour)
str(transaction_data)
transaction_data$DATE <- as.Date(transaction_data$DATE,origin = "1899-12-30")
#head(transaction_data$PROD_NAME)
transaction_data[, .N, PROD_NAME]
#### Examine the words in PROD_NAME to see if there are any incorrect entries
#### such as products that are not chips
productWords <- data.table(unlist(strsplit(unique(transaction_data[, PROD_NAME]), "
")))
setnames(productWords, 'words')
library(stringr)
library(stringi)
#### Removing special characters
productWords$words <- str_replace_all(productWords$words,"[[:punct:]]"," ")
#### Removing digits
productWords$words <- str_replace_all(productWords$words,"[0-9]"," ")
productWords$words <- str_replace_all(productWords$words,"[gG]"," ")
#### Let's look at the most common words by counting the number of times a word appears and
wordsSep <- strsplit(productWords$words," ")
words.freq<-table(unlist(wordsSep))
#### sorting them by this frequency in order of highest to lowest frequency
words.freq <-  as.data.frame(words.freq)
words.freq <- words.freq[order(words.freq$Freq, decreasing = T),]
library(stringr)
library(stringi)
#### Removing special characters
productWords$words <- str_replace_all(productWords$words,"[[:punct:]]"," ")
#### Removing digits
productWords$words <- str_replace_all(productWords$words,"[0-9]"," ")
productWords$words <- str_replace_all(productWords$words,"[gG]"," ")
#### Let's look at the most common words by counting the number of times a word appears and
wordsSep <- strsplit(productWords$words," ")
words.freq<-table(unlist(wordsSep))
#### sorting them by this frequency in order of highest to lowest frequency
words.freq <-  as.data.frame(words.freq)
words.freq <- words.freq[order(words.freq$Freq, decreasing = T),]
words.freq
transaction_data[, SALSA := grepl("salsa", tolower(PROD_NAME))]
transaction_data <- transaction_data[SALSA == FALSE, ][, SALSA := NULL]
summary(transaction_data)
library(tidyverse)
library(dplyr)
prod_qty_200 <- transaction_data %>% filter(PROD_QTY==200)
is_it_same_customer <- transaction_data %>% filter(LYLTY_CARD_NBR == 226000)
transaction_data <- transaction_data[!(transaction_data$LYLTY_CARD_NBR == 226000)]
summary(transaction_data)
countByDate <- count(transaction_data, transaction_data$DATE)
nrow(countByDate)
summary(countByDate)
countByDate <- count(transaction_data, transaction_data$DATE)
countByDate
nrow(countByDate)
summary(countByDate)
transaction_by_day <- transaction_data[order(DATE),]
theme_set(theme_bw())
theme_update(plot.title = element_text(hjust = 0.5))
transOverTime <-ggplot(countByDate, aes(x = countByDate$`transaction_data$DATE`, y = countByDate$n)) +
geom_line() +
labs(x = "Day", y = "Number of transactions", title = "Transactions over time") +
scale_x_date(breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
transOverTime
filterData <- countByDate[countByDate$`transaction_data$DATE` >= "2018-12-01" & countByDate$`transaction_data$DATE` <= "2018-12-31"]
ggplot(filterData, aes(x = filterData$`transaction_data$DATE`, y = filterData$n)) +
geom_line() +
labs(x = "Day", y = "Number of transactions", title = "Transactions in December") +
scale_x_date(breaks = "1 day") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### We can work this out by taking the digits that are in PROD_NAME
transaction_data[, PACK_SIZE := parse_number(PROD_NAME)]
#### Let's check if the pack sizes look sensible
df_packSizeVsTransactions <- transaction_data[, .N, PACK_SIZE][order(PACK_SIZE)]
df_packSizeVsTransactions
ggplot(df_packSizeVsTransactions, aes(x = df_packSizeVsTransactions$PACK_SIZE, y = df_packSizeVsTransactions$N)) +
geom_line() +
labs(x = "Pack Sizes", y = "Number of transactions", title = "Transactions over time") + scale_x_continuous(breaks = seq(70,390,20)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
ggplot(df_packSizeVsTransactions, aes(x = df_packSizeVsTransactions$PACK_SIZE, y = df_packSizeVsTransactions$N)) +
geom_histogram() +
labs(x = "Pack Sizes", y = "Number of transactions", title = "Transactions over time") + scale_x_continuous(breaks = seq(70,390,20)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
ggplot(df_packSizeVsTransactions, aes(x = df_packSizeVsTransactions$PACK_SIZE, y = df_packSizeVsTransactions$N)) +
geom_histogram(binwidth = 10) +
labs(x = "Pack Sizes", y = "Number of transactions", title = "Transactions over time") + scale_x_continuous(breaks = seq(70,390,20)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#ggplot(df_packSizeVsTransactions, aes(x = df_packSizeVsTransactions$PACK_SIZE, y = df_packSizeVsTransactions$N)) +
# geom_line() +
#labs(x = "Pack Sizes", y = "Number of transactions", title = "Transactions #over time") + scale_x_continuous(breaks = seq(70,390,20)) +
#theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
hist(transaction_data[, PACK_SIZE])
#Create a column which contains the brand of the product, by extracting it from the product name.
transaction_data$BRAND <- gsub("([A-Za-z]+).*", "\\1", transaction_data$PROD_NAME)
#Create a column which contains the brand of the product, by extracting it from the product name.
transaction_data$BRAND <- gsub("([A-Za-z]+).*", "\\1", transaction_data$PROD_NAME)
transaction_data[, .N, by = BRAND][order(‐N)]
transaction_data[BRAND == "RED", BRAND := "RRD"]
transaction_data[BRAND == "SNBTS", BRAND := "SUNBITES"]
transaction_data[BRAND == "INFZNS", BRAND := "INFUZIONS"]
transaction_data[BRAND == "WW", BRAND := "WOOLWORTHS"]
transaction_data[BRAND == "SMITH", BRAND := "SMITHS"]
transaction_data[BRAND == "NCC", BRAND := "NATURAL"]
transaction_data[BRAND == "DORITO", BRAND := "DORITOS"]
transaction_data[BRAND == "GRAIN", BRAND := "GRNWVES"]
###Check again
transaction_data[, .N, by = BRAND][order(BRAND)]
summary(purchase_beahviour)
data <- merge(transaction_data, purchase_beahviour, all.x = TRUE)
apply(data, 2, function(x) any(is.na(x)))
#### Examining the values of lifestage and premium_customer
purchase_beahviour[, .N, by = LIFESTAGE][order(‐N)]
purchase_beahviour[, .N, by = PREMIUM_CUSTOMER][order(‐N)]
total_sales <- data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pf.total_sales <- summarise(total_sales,sales_count=sum(TOT_SALES))
summary(pf.total_sales)
data[, .(SALES = sum(TOT_SALES)), .(LIFESTAGE, PREMIUM_CUSTOMER)]
View(total_sales)
View(pf.total_sales)
total_sales <- data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pf.total_sales <- summarise(total_sales,sales_count=sum(TOT_SALES))
summary(pf.total_sales)
#### Create plot
p <‐ ggplot(data=sales_count) + geom_mosaic(aes(weight = sales_count, x = product(PREMIUM_CUSTOMER, LIFESTAGE),fill = PREMIUM_CUSTOMER)) + labs(x = "Lifestage", y = "Premium customer flag", title = "Proportion of sales") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
total_sales <- data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pf.total_sales <- summarise(total_sales,sales_count=sum(TOT_SALES))
summary(pf.total_sales)
#### Create plot
p <‐ ggplot(data=sales) + geom_mosaic(aes(weight = sales_count, x = product(PREMIUM_CUSTOMER, LIFESTAGE),fill = PREMIUM_CUSTOMER)) + labs(x = "Lifestage", y = "Premium customer flag", title = "Proportion of sales") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
total_sales <- data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pf.total_sales <- summarise(total_sales,sales_count=sum(TOT_SALES))
summary(pf.total_sales)
#### Create plot
p <‐ ggplot(pf.total_sales) + geom_mosaic(aes(weight = sales_count, x = product(PREMIUM_CUSTOMER, LIFESTAGE),fill = PREMIUM_CUSTOMER)) + labs(x = "Lifestage", y = "Premium customer flag", title = "Proportion of sales") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
total_sales <- data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pf.total_sales <- summarise(total_sales,sales_count=sum(TOT_SALES))
summary(pf.total_sales)
#### Create plot
p <‐ ggplot(pf.total_sales) + geom_mosaic(aes(weight = sales_count, x = product(PREMIUM_CUSTOMER, LIFESTAGE),fill = PREMIUM_CUSTOMER)) + labs(x = "Lifestage", y = "Premium customer flag", title = "Proportion of sales") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + geom_text(data = ggplot_build(p)$data[[1]], aes(x = (xmin + xmax)/2 , y = (ymin + ymax)/2, label = as.character(paste(round(.wt/sum(.wt),3)*100, '%'))))
p
‐ data[, .(CUSTOMERS = uniqueN(LYLTY_CARD_NBR)), .(LIFESTAGE,PREMIUM_CUSTOMER)][order(‐CUSTOMERS)]
data[, .(CUSTOMERS = uniqueN(LYLTY_CARD_NBR)), .(LIFESTAGE,PREMIUM_CUSTOMER)][order(‐CUSTOMERS)]
total_sales <- data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
no_of_customers <- summarise(total_sales,customer_count = length(unique(LYLTY_CARD_NBR)))
summary(no_of_customers)
View(no_of_customers)
data[, .(CUSTOMERS = uniqueN(LYLTY_CARD_NBR)), .(LIFESTAGE,PREMIUM_CUSTOMER)][order(‐CUSTOMERS)]
total_sales <- data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
no_of_customers <- summarise(total_sales,customer_count = length(unique(LYLTY_CARD_NBR)))
summary(no_of_customers)
#### Create plot
p <‐ ggplot(data = no_of_customers) + geom_mosaic(aes(weight = customer_count, x = product(PREMIUM_CUSTOMER, LIFESTAGE), fill = PREMIUM_CUSTOMER)) + labs(x = "Lifestage", y = "Premium customer flag", title = "Proportion of customers") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))+ geom_text(data = ggplot_build(p)$data[[1]], aes(x = (xmin + xmax)/2 , y = (ymin + ymax)/2, label = as.character(paste(round(.wt/sum(.wt),3)*100, '%'))))
total_sales <- data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
no_of_customers <- summarise(total_sales,customer_count = length(unique(LYLTY_CARD_NBR)))
summary(no_of_customers)
#### Create plot
p <‐ ggplot(data = no_of_customers) + geom_mosaic(aes(weight = customer_count, x = product(PREMIUM_CUSTOMER, LIFESTAGE), fill = PREMIUM_CUSTOMER)) + labs(x = "Lifestage", y = "Premium customer flag", title = "Proportion of customers") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))+ geom_text(data = ggplot_build(p)$data[[1]], aes(x = (xmin + xmax)/2 , y = (ymin + ymax)/2, label = as.character(paste(round(.wt/sum(.wt),3)*100, '%'))))
p
data[, .(AVG = sum(PROD_QTY)/uniqueN(LYLTY_CARD_NBR)),.(LIFESTAGE, PREMIUM_CUSTOMER)][order(‐AVG)]
total_sales_1 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER,LYLTY_CARD_NBR)
units <-  summarise(total_sales_1, units_count = sum(PROD_QTY))
summary(units)
check <- units[order(units$units_count, decreasing = T),]
View(units)
total_sales_1 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER,LYLTY_CARD_NBR)
units <-  summarise(total_sales_1, units_count = sum(PROD_QTY)/uniqueN(LYLTY_CARD_NBR))
summary(units)
check <- units[order(units$units_count, decreasing = T),]
total_sales_1 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER,LYLTY_CARD_NBR)
units <-  summarise(total_sales_1, units_count = (sum(PROD_QTY)/uniqueN(LYLTY_CARD_NBR)))
summary(units)
check <- units[order(units$units_count, decreasing = T),]
total_sales_1 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
units <-  summarise(total_sales_1, units_count = (sum(PROD_QTY)/uniqueN(LYLTY_CARD_NBR)))
summary(units)
check <- units[order(units$units_count, decreasing = T),]
total_sales_1 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
units <-  summarise(total_sales_1, units_count = (sum(PROD_QTY)/uniqueN(LYLTY_CARD_NBR)))
summary(units)
###create plot
ggplot(data = units, aes(weight = AVG, x = LIFESTAGE, fill = PREMIUM_CUSTOMER)) + geom_bar(position = position_dodge()) +
labs(x = "Lifestage", y = "Avg units per transaction", title = "Units per customer") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
total_sales_1 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
units <-  summarise(total_sales_1, units_count = (sum(PROD_QTY)/uniqueN(LYLTY_CARD_NBR)))
summary(units)
###create plot
ggplot(data = units, aes(weight = units_count, x = LIFESTAGE, fill = PREMIUM_CUSTOMER)) + geom_bar(position = position_dodge()) +
labs(x = "Lifestage", y = "Avg units per transaction", title = "Units per customer") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
check <- units[order(units$units_count, decreasing = T),]
total_sales_2 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pricePerUnit <-  summarise(total_sales_2, price_per_unit = (sum(TOT_SALES)/sum(PROD_QTY)))
####plot
ggplot(pricePerUnit, aes(x = pricePerUnit$price_per_unit, y = pricePerUnit$LYLTY_CARD_NBR, color = pricePerUnit$PREMIUM_CUSTOMER)) +
geom_bar() + facet_wrap(~pricePerUnit$LIFESTAGE)+ labs(x = "Price per unit sold", y = "Cusomer Id", title = "Sales by individual Customers") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
View(pricePerUnit)
total_sales_2 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pricePerUnit <-  summarise(total_sales_2, price_per_unit = (sum(TOT_SALES)/sum(PROD_QTY)))
####plot
ggplot(pricePerUnit, aes(weight = price_per_unit,x = pricePerUnit$LIFESTAGE, y = pricePerUnit$PREMIUM_CUSTOMER)) +
geom_bar(position_dodge()) + labs(x = "Lifestage", y = "Avg price per unit", title = "Price per unit") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
total_sales_2 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pricePerUnit <-  summarise(total_sales_2, price_per_unit = (sum(TOT_SALES)/sum(PROD_QTY)))
####plot
ggplot(pricePerUnit, aes(weight = price_per_unit,x = pricePerUnit$LIFESTAGE, y = pricePerUnit$PREMIUM_CUSTOMER)) +
geom_bar(position_dodge()) + labs(x = "Lifestage", y = "Avg price per unit", title = "Price per unit") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
total_sales_2 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pricePerUnit <-  summarise(total_sales_2, price_per_unit = (sum(TOT_SALES)/sum(PROD_QTY)))
####plot
ggplot(data=pricePerUnit, aes(weight = price_per_unit,x = pricePerUnit$LIFESTAGE, fill = pricePerUnit$PREMIUM_CUSTOMER)) +
geom_bar(position_dodge()) + labs(x = "Lifestage", y = "Avg price per unit", title = "Price per unit") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
total_sales_2 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pricePerUnit <-  summarise(total_sales_2, price_per_unit = (sum(TOT_SALES)/sum(PROD_QTY)))
####plot
ggplot(data=pricePerUnit, aes(weight = price_per_unit,x = pricePerUnit$LIFESTAGE, fill = pricePerUnit$PREMIUM_CUSTOMER)) + geom_bar(position_dodge()) + labs(x = "Lifestage", y = "Avg price per unit", title = "Price per unit") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
total_sales_2 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pricePerUnit <-  summarise(total_sales_2, price_per_unit = (sum(TOT_SALES)/sum(PROD_QTY)))
####plot
ggplot(data=pricePerUnit, aes(weight = price_per_unit,x = pricePerUnit$LIFESTAGE, fill = pricePerUnit$PREMIUM_CUSTOMER)) + geom_bar(position_dodge()) + labs(x = "Lifestage", y = "Avg price per unit", title = "Price per unit") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
total_sales_2 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pricePerUnit <-  summarise(total_sales_2, price_per_unit = (sum(TOT_SALES)/sum(PROD_QTY)))
####plot
ggplot(data=pricePerUnit, aes(weight = price_per_unit,x = LIFESTAGE, fill = PREMIUM_CUSTOMER)) + geom_bar(position = position_dodge()) + labs(x = "Lifestage", y = "Avg price per unit", title = "Price per unit") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
xBudget_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Premium", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xPre_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Budget", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
# If this p-value is above .05, then there is not a significant difference in test scores.
t_Bud_Main <- t.test(xBudget_main$price_per_unit ~ xBudget_main$PREMIUM_CUSTOMER)
xBudget_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Premium", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xPre_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Budget", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
# If this p-value is above .05, then there is not a significant difference in test scores.
t_Bud_Main <- t.test(xBudget_main$price_per_unit ~ xBudget_main$PREMIUM_CUSTOMER)
xBudget_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Premium", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xPre_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Budget", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xBudget_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Premium", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xPre_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Budget", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
# If this p-value is above .05, then there is not a significant difference in test scores.
t_Bud_Main <- t.test(xBudget_main$price_per_unit ~ xBudget_main$PREMIUM_CUSTOMER)
xBudget_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Premium", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
xPre_main <- pricePerUnit %>% filter(!PREMIUM_CUSTOMER=="Budget", LIFESTAGE=="MIDAGE SINGLES/COUPLES")
# If this p-value is above .05, then there is not a significant difference in test scores.
t_Bud_Main <- t.test(xBudget_main$price_per_unit ~ xBudget_main$PREMIUM_CUSTOMER)
t_Bud_Main <- t.test(xBudget_main$price_per_unit ~ xBudget_main$PREMIUM_CUSTOMER)
View(xBudget_main)
# If this p-value is above .05, then there is not a significant difference in test scores.
pricePerUnit <‐ data[, price := TOT_SALES/PROD_QTY]
t.test(data[LIFESTAGE %in% c("YOUNG SINGLES/COUPLES", "MIDAGE SINGLES/COUPLES") & PREMIUM_CUSTOMER == "Mainstream", price],data[LIFESTAGE %in% c("YOUNG SINGLES/COUPLES", "MIDAGE SINGLES/COUPLES") & PREMIUM_CUSTOMER != "Mainstrream", price], alternative = "greater")
xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", LIFESTAGE=="YOUNG SINGLES/COUPLES")
xMain1 <- xMain$BRAND
#tab_fre_brand <- table(data$BRAND)
#tab_fre_brand
###APRIORI
library(arules)
library(arulesViz)
glimpse(xMain1)
write.csv(xMain1, "try.csv")
tr <- read.transactions("try.csv", format = 'basket')
summary(tr)
library(RColorBrewer)
itemFrequencyPlot(tr,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
#xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", #LIFESTAGE=="YOUNG SINGLES/COUPLES")
#xMain1 <- xMain$BRAND
#tab_fre_brand <- table(data$BRAND)
#tab_fre_brand
###APRIORI
#library(arules)
#library(arulesViz)
#glimpse(xMain1)
#write.csv(xMain1, "try.csv")
#tr <- read.transactions("try.csv", format = 'basket')
#summary(tr)
#library(RColorBrewer)
#itemFrequencyPlot(tr,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
#### Deep dive into Mainstream, young singles/couples
segment1 <‐ data[LIFESTAGE == "YOUNG SINGLES/COUPLES" & PREMIUM_CUSTOMER == "Mainstream",]
other <‐ data[!(LIFESTAGE == "YOUNG SINGLES/COUPLES" & PREMIUM_CUSTOMER =="Mainstream"),]
#### Brand affinity compared to the rest of the population
quantity_segment1 <‐ segment1[, sum(PROD_QTY)]
quantity_other <‐ other[, sum(PROD_QTY)]
quantity_segment1_by_brand <‐ segment1[, .(targetSegment = sum(PROD_QTY)/quantity_segment1), by = BRAND]
quantity_other_by_brand <‐ other[, .(other = sum(PROD_QTY)/quantity_other), by = BRAND]
brand_proportions <‐ merge(quantity_segment1_by_brand, quantity_other_by_brand)[, affinityToBrand := targetSegment/other]
brand_proportions[order(‐affinityToBrand)]
#xMain2 <- xMain$PACK_SIZE
#tab_fre_brand <- table(data$BRAND)
#tab_fre_brand
#glimpse(xMain2)
#write.csv(xMain2, "try2.csv")
#tr1 <- read.transactions("try2.csv", format = 'basket')
#summary(tr1)
#library(RColorBrewer)
#itemFrequencyPlot(tr1,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
quantity_segment1_by_pack <‐ segment1[, .(targetSegment = sum(PROD_QTY)/quantity_segment1), by = PACK_SIZE]
quantity_other_by_pack <‐ other[, .(other = sum(PROD_QTY)/quantity_other), by = PACK_SIZE]
pack_proportions <‐ merge(quantity_segment1_by_pack, quantity_other_by_pack)[, affinityToPack := targetSegment/other]
pack_proportions[order(‐affinityToPack)]
data[PACK_SIZE == 270, unique(PROD_NAME)]
total_sales <- data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pf.total_sales <- summarise(total_sales,sales_count=sum(TOT_SALES))
summary(pf.total_sales)
#### Create plot
p <‐ ggplot(pf.total_sales) + geom_mosaic(aes(weight = sales_count, x = product(PREMIUM_CUSTOMER, LIFESTAGE),fill = PREMIUM_CUSTOMER)) + labs(x = "Lifestage", y = "Premium customer flag", title = "Proportion of sales") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + geom_text(data = ggplot_build(p)$data[[1]], aes(x = (xmin + xmax)/2 , y = (ymin + ymax)/2, label = as.character(paste(round(.wt/sum(.wt),3)*100, '%'))))
p
total_sales <- data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pf.total_sales <- summarise(total_sales,sales_count=sum(TOT_SALES))
summary(pf.total_sales)
#### Create plot
p <- ggplot(pf.total_sales) + geom_mosaic(aes(weight = sales_count, x = product(PREMIUM_CUSTOMER, LIFESTAGE),fill = PREMIUM_CUSTOMER)) + labs(x = "Lifestage", y = "Premium customer flag", title = "Proportion of sales") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + geom_text(data = ggplot_build(p)$data[[1]], aes(x = (xmin + xmax)/2 , y = (ymin + ymax)/2, label = as.character(paste(round(.wt/sum(.wt),3)*100, '%'))))
p
total_sales <- data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
pf.total_sales <- summarise(total_sales,sales_count=sum(TOT_SALES))
summary(pf.total_sales)
#### Create plot
p <- ggplot(pf.total_sales) + geom_mosaic(aes(weight = sales_count, x = product(PREMIUM_CUSTOMER, LIFESTAGE),fill = PREMIUM_CUSTOMER)) + labs(x = "Lifestage", y = "Premium customer flag", title = "Proportion of sales") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + geom_text(data = ggplot_build(p)$data[[1]], aes(x = (xmin + xmax)/2 , y = (ymin + ymax)/2, label = as.character(paste(round(.wt/sum(.wt),3)*100, '%'))), inherit.aes = F)
p
